kind: Deployment
apiVersion: apps/v1
metadata:
  name: postgres-airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      deploy: postgres-airflow
  template:
    metadata:
      labels:
        name: postgres-airflow
        deploy: postgres-airflow
    spec:
      restartPolicy: Always
      containers:
        - name: postgres
          image: bitnami/postgresql:14
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: postgredb
              mountPath: /bitnami/postgresql
          #          volumeMounts:
          #            - name: dbvol
          #              mountPath: /var/lib/postgresql/data/pgdata
          #              subPath: pgdata
          env:
            - name: POSTGRES_USER
              value: airflow
            - name: POSTGRES_PASSWORD
              value: airflow
            - name: POSTGRES_DB
              value: airflow
#            - name: PGDATA
#              value: /var/lib/postgresql/data/pgdata
#            - name: POD_IP
#              valueFrom: { fieldRef: { fieldPath: status.podIP } }
#                livenessProbe:
#                  initialDelaySeconds: 60
#                  timeoutSeconds: 5
#                  failureThreshold: 5
#                  exec:
#                    command:
#                      - /bin/sh
#                      - -c
#                      - exec pg_isready --host $POD_IP ||  if [[ $(psql -qtAc --host $POD_IP 'SELECT pg_is_in_recovery') != "f" ]]; then  exit 0 else; exit 1; fi
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
      #          resources:
      #            requests:
      #              memory: .5Gi
      #              cpu: .5
      volumes:
        - name: postgredb
          emptyDir: { }